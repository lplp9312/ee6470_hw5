// Generated by stratus_hls 19.12-s100  (91710.131054)
// Mon Apr 26 02:59:59 2021
// from ../GauFilter.cpp

`timescale 1ps / 1ps

      
module GauFilter(i_clk, i_rst, i_r_busy, i_r_vld, i_r_data, i_g_busy, i_g_vld, i_g_data, i_b_busy, i_b_vld, i_b_data, o_result_busy, o_result_vld, o_result_data);

      input i_clk;
      input i_rst;
      input i_r_vld;
      input [7:0] i_r_data;
      input i_g_vld;
      input [7:0] i_g_data;
      input i_b_vld;
      input [7:0] i_b_data;
      input o_result_busy;
      output i_r_busy;
      output i_g_busy;
      output i_b_busy;
      output o_result_vld;
      output [23:0] o_result_data;
      reg [23:0] o_result_data;
      reg o_result_m_req_m_prev_trig_req;
      reg o_result_m_unacked_req;
      wire GauFilter_Xor_1Ux1U_1U_1_1_out1;
      wire GauFilter_Or_1Ux1U_1U_4_2_out1;
      reg GauFilter_N_Muxb_1_2_4_4_10_out1;
      reg i_b_m_unvalidated_req;
      wire GauFilter_gen_busy_r_4_41_gnew_req_i1;
      wire GauFilter_gen_busy_r_4_41_gdiv_i3;
      wire GauFilter_gen_busy_r_4_41_gen_busy_0_i_r_m_data_is_invalid_next;
      reg GauFilter_N_Muxb_1_2_4_4_7_out1;
      reg i_g_m_unvalidated_req;
      wire GauFilter_gen_busy_r_4_40_gnew_req_i1;
      wire GauFilter_gen_busy_r_4_40_gdiv_i3;
      wire GauFilter_gen_busy_r_4_40_gen_busy_0_i_r_m_data_is_invalid_next;
      reg GauFilter_N_Muxb_1_2_4_4_4_out1;
      reg i_r_m_unvalidated_req;
      wire GauFilter_gen_busy_r_4_39_gnew_req_i1;
      wire GauFilter_gen_busy_r_4_39_gdiv_i3;
      wire GauFilter_gen_busy_r_4_39_gen_busy_0_i_r_m_data_is_invalid_next;
      reg[3:0] global_state_next;
      wire[7:0] GauFilter_Add_8Ux8U_8U_4_31_out1;
      wire[7:0] GauFilter_Add_8Ux8U_8U_4_31_in1;
      wire[11:0] GauFilter_Mul_8Ux8U_12U_4_30_out1;
      reg gs_ctrl4;
      reg[7:0] GauFilter_N_Mux_8_3_2_4_29_out1;
      reg[7:0] GauFilter_N_Mux_8_3_2_4_28_out1;
      wire GauFilter_OrReduction_2U_1U_4_26_out1;
      wire GauFilter_Equal_2Ux1U_1U_4_25_out1;
      wire GauFilter_OrReduction_2U_1U_4_16_out1;
      wire GauFilter_Equal_2Ux1U_1U_4_15_out1;
      reg[1:0] GauFilter_Equal_2Ux1U_1U_4_15_in2;
      wire GauFilter_Equal_2Ux2U_1U_4_14_out1;
      reg[1:0] GauFilter_Equal_2Ux2U_1U_4_14_in2;
      reg gs_ctrl1;
      reg[1:0] GauFilter_Add_2Ux1U_2U_4_12_in2;
      reg gs_ctrl0;
      wire[1:0] GauFilter_Add_2Ux1U_2U_4_12_out1;
      reg[1:0] s_reg_36;
      reg[7:0] s_reg_35;
      wire[3:0] GauFilter_Add_4Ux2U_4U_4_23_out1;
      wire[3:0] GauFilter_Mul_2Ux2U_4U_4_22_out1;
      reg[3:0] s_reg_34;
      reg[7:0] s_reg_33;
      reg[7:0] s_reg_32;
      wire[1:0] GauFilter_Add_2Ux1U_2U_4_20_out1;
      wire[1:0] GauFilter_Add_2Ux1U_2U_4_21_out1;
      reg[1:0] s_reg_30;
      reg[1:0] s_reg_31;
      reg[1:0] s_reg_29;
      reg[7:0] GauFilter_N_Mux_8_2_1_4_19_out1;
      reg[7:0] s_reg_28;
      reg[7:0] GauFilter_N_Mux_8_2_0_4_18_out1;
      reg[7:0] s_reg_27;
      reg[7:0] GauFilter_N_Mux_8_2_0_4_17_out1;
      reg[7:0] s_reg_26;
      wire GauFilter_And_1Ux1U_1U_4_37_out1;
      wire[2:0] GauFilter_gen_busy_r_4_39_out1;
      wire[2:0] GauFilter_gen_busy_r_4_40_out1;
      wire[2:0] GauFilter_gen_busy_r_4_41_out1;
      wire GauFilter_Not_1U_1U_1_3_out1;
      reg o_result_m_req_m_trig_req;
      reg i_b_m_busy_req_0;
      reg i_g_m_busy_req_0;
      wire GauFilter_LessThan_2Ux2U_1U_4_35_out1;
      wire GauFilter_LessThan_2Ux2U_1U_4_36_out1;
      wire[1:0] GauFilter_Add_2Ux1U_2U_4_27_out1;
      wire GauFilter_LessThan_2Ux2U_1U_4_13_out1;
      reg[3:0] global_state;
      reg i_r_m_busy_req_0;
      reg[7:0] GauFilter_N_Mux_8_2_3_4_32_out1;
      reg[7:0] GauFilter_N_Mux_8_2_3_4_33_out1;
      reg[7:0] GauFilter_N_Mux_8_2_3_4_34_out1;
      reg stall0;
      reg[3:0] mask_in1;
      wire[7:0] mask_out1;

         GauFilter_ROM_9X8_mask mask(
                                  .in1( mask_in1 ),
                                  .out1( mask_out1 ),
                                  .clk( i_clk )
                                );

         // resource: regr_en_24
         always @(posedge i_clk)
          begin :drive_o_result_data
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  o_result_data <= {GauFilter_N_Mux_8_2_3_4_32_out1, {GauFilter_N_Mux_8_2_3_4_33_out1, GauFilter_N_Mux_8_2_3_4_34_out1}};
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ss_1
         always @(posedge i_clk)
          begin :drive_i_r_m_busy_req_0
            if (i_rst == 1'b0) begin
               i_r_m_busy_req_0 <= 1'd1;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        4'd00, 4'd01, 4'd08:                         begin
                           if (GauFilter_LessThan_2Ux2U_1U_4_13_out1) begin
                           end
                           else begin
                              i_r_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        4'd02:                         begin
                           i_r_m_busy_req_0 <= 1'd1;
                        end
                        
                        4'd06:                         begin
                           if (2'd3 == GauFilter_Add_2Ux1U_2U_4_27_out1) begin
                              if (GauFilter_LessThan_2Ux2U_1U_4_36_out1) begin
                                 i_r_m_busy_req_0 <= 1'd0;
                              end
                              else begin
                                 if (GauFilter_LessThan_2Ux2U_1U_4_35_out1) begin
                                    i_r_m_busy_req_0 <= 1'd0;
                                 end
                              end
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ss_1
         always @(posedge i_clk)
          begin :drive_i_g_m_busy_req_0
            if (i_rst == 1'b0) begin
               i_g_m_busy_req_0 <= 1'd1;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        4'd02:                         begin
                           i_g_m_busy_req_0 <= 1'd0;
                        end
                        
                        4'd03:                         begin
                           i_g_m_busy_req_0 <= 1'd1;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ss_1
         always @(posedge i_clk)
          begin :drive_i_b_m_busy_req_0
            if (i_rst == 1'b0) begin
               i_b_m_busy_req_0 <= 1'd1;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        4'd03:                         begin
                           i_b_m_busy_req_0 <= 1'd0;
                        end
                        
                        4'd04:                         begin
                           i_b_m_busy_req_0 <= 1'd1;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_m_req_m_trig_req
            if (i_rst == 1'b0) begin
               o_result_m_req_m_trig_req <= 1'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        4'd06:                         begin
                           if (2'd3 == GauFilter_Add_2Ux1U_2U_4_27_out1 && (!GauFilter_LessThan_2Ux2U_1U_4_36_out1 && !GauFilter_LessThan_2Ux2U_1U_4_35_out1)) begin
                              o_result_m_req_m_trig_req <= GauFilter_Not_1U_1U_1_3_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx5i1c
         always @(GauFilter_And_1Ux1U_1U_4_37_out1 or GauFilter_gen_busy_r_4_39_out1[0] or GauFilter_gen_busy_r_4_40_out1[0] or GauFilter_gen_busy_r_4_41_out1[0] or global_state)
          begin :drive_stall0
            case (global_state) 

               4'd02:                begin
                  stall0 = GauFilter_gen_busy_r_4_39_out1[0];
               end
               
               4'd03:                begin
                  stall0 = GauFilter_gen_busy_r_4_40_out1[0];
               end
               
               4'd04:                begin
                  stall0 = GauFilter_gen_busy_r_4_41_out1[0];
               end
               
               4'd07:                begin
                  stall0 = GauFilter_And_1Ux1U_1U_4_37_out1;
               end
               
               default:                begin
                  stall0 = 1'b0;
               end
               
            endcase

         end

         // resource: mux_8bx2i0c
         // resource: regr_en_sc_8
         always @(posedge i_clk)
          begin :drive_s_reg_26
            if (i_rst == 1'b0) begin
               s_reg_26 <= 8'd000;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        4'd00, 4'd01, 4'd08:                         begin
                           s_reg_26 <= GauFilter_N_Mux_8_2_0_4_17_out1;
                        end
                        
                        4'd06:                         begin
                           s_reg_26 <= GauFilter_N_Mux_8_2_3_4_32_out1;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_8bx2i0c
         // resource: regr_en_sc_8
         always @(posedge i_clk)
          begin :drive_s_reg_27
            if (i_rst == 1'b0) begin
               s_reg_27 <= 8'd000;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        4'd00, 4'd01, 4'd08:                         begin
                           s_reg_27 <= GauFilter_N_Mux_8_2_0_4_18_out1;
                        end
                        
                        4'd06:                         begin
                           s_reg_27 <= GauFilter_N_Mux_8_2_3_4_33_out1;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_8bx2i0c
         // resource: regr_en_sc_8
         always @(posedge i_clk)
          begin :drive_s_reg_28
            if (i_rst == 1'b0) begin
               s_reg_28 <= 8'd000;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        4'd00, 4'd01, 4'd08:                         begin
                           s_reg_28 <= GauFilter_N_Mux_8_2_1_4_19_out1;
                        end
                        
                        4'd06:                         begin
                           s_reg_28 <= GauFilter_N_Mux_8_2_3_4_34_out1;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx2i1c
         // resource: regr_en_2
         always @(posedge i_clk)
          begin :drive_s_reg_29
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     4'd00, 4'd08:                      begin
                        s_reg_29 <= 2'd0;
                     end
                     
                     4'd06:                      begin
                        if (2'd3 == GauFilter_Add_2Ux1U_2U_4_27_out1) begin
                           if (GauFilter_LessThan_2Ux2U_1U_4_36_out1) begin
                           end
                           else begin
                              s_reg_29 <= s_reg_31;
                           end
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_2bx2i1c
         // resource: regr_en_2
         always @(posedge i_clk)
          begin :drive_s_reg_30
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     4'd00, 4'd01, 4'd08:                      begin
                        s_reg_30 <= 2'd0;
                     end
                     
                     4'd04:                      begin
                        s_reg_30 <= GauFilter_Add_2Ux1U_2U_4_21_out1;
                     end
                     
                     4'd06:                      begin
                        if (2'd3 == GauFilter_Add_2Ux1U_2U_4_27_out1) begin
                           if (GauFilter_LessThan_2Ux2U_1U_4_36_out1) begin
                           end
                           else begin
                              s_reg_30 <= 2'd0;
                           end
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_2
         always @(posedge i_clk)
          begin :drive_s_reg_31
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     4'd02:                      begin
                        s_reg_31 <= GauFilter_Add_2Ux1U_2U_4_20_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_s_reg_32
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     4'd02:                      begin
                        s_reg_32 <= i_r_data;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_s_reg_33
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     4'd03:                      begin
                        s_reg_33 <= i_g_data;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_4bx2i0c
         // resource: regr_en_4
         always @(posedge i_clk)
          begin :drive_s_reg_34
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     4'd04:                      begin
                        s_reg_34 <= GauFilter_Mul_2Ux2U_4U_4_22_out1;
                     end
                     
                     4'd05:                      begin
                        s_reg_34 <= GauFilter_Add_4Ux2U_4U_4_23_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_8
         always @(posedge i_clk)
          begin :drive_s_reg_35
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     4'd04:                      begin
                        s_reg_35 <= i_b_data;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_2bx3i1c
         // resource: regr_en_2
         always @(posedge i_clk)
          begin :drive_s_reg_36
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     4'd00, 4'd01, 4'd08:                      begin
                        s_reg_36 <= GauFilter_Add_2Ux1U_2U_4_12_out1;
                     end
                     
                     4'd05:                      begin
                        s_reg_36 <= 2'd0;
                     end
                     
                     4'd06:                      begin
                        if (2'd3 != GauFilter_Add_2Ux1U_2U_4_27_out1) begin
                           s_reg_36 <= GauFilter_Add_2Ux1U_2U_4_27_out1;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_2bx2i1c
         always @(s_reg_36 or gs_ctrl0)
          begin :drive_GauFilter_Add_2Ux1U_2U_4_12_in2
            if (gs_ctrl0) begin
               GauFilter_Add_2Ux1U_2U_4_12_in2 = s_reg_36;
            end
            else begin
               GauFilter_Add_2Ux1U_2U_4_12_in2 = 2'd0;
            end
         end

         // resource: GauFilter_Add_2Ux1U_2U_4  instance: GauFilter_Add_2Ux1U_2U_4_12
         assign GauFilter_Add_2Ux1U_2U_4_12_out1 = GauFilter_Add_2Ux1U_2U_4_12_in2 + 2'd1;

         // resource: GauFilter_LessThan_2Ux2U_1U_4  instance: GauFilter_LessThan_2Ux2U_1U_4_13
         assign GauFilter_LessThan_2Ux2U_1U_4_13_out1 = GauFilter_Add_2Ux1U_2U_4_12_out1 < 2'd3;

         // resource: mux_2bx2i1c
         always @(s_reg_36 or gs_ctrl1)
          begin :drive_GauFilter_Equal_2Ux2U_1U_4_14_in2
            if (gs_ctrl1) begin
               GauFilter_Equal_2Ux2U_1U_4_14_in2 = s_reg_36;
            end
            else begin
               GauFilter_Equal_2Ux2U_1U_4_14_in2 = 2'd0;
            end
         end

         // resource: GauFilter_Equal_2Ux2U_1U_4  instance: GauFilter_Equal_2Ux2U_1U_4_14
         assign GauFilter_Equal_2Ux2U_1U_4_14_out1 = GauFilter_Equal_2Ux2U_1U_4_14_in2 == 2'd2;

         // resource: mux_2bx2i1c
         always @(s_reg_36 or gs_ctrl0)
          begin :drive_GauFilter_Equal_2Ux1U_1U_4_15_in2
            if (gs_ctrl0) begin
               GauFilter_Equal_2Ux1U_1U_4_15_in2 = s_reg_36;
            end
            else begin
               GauFilter_Equal_2Ux1U_1U_4_15_in2 = 2'd0;
            end
         end

         // resource: GauFilter_Equal_2Ux1U_1U_4  instance: GauFilter_Equal_2Ux1U_1U_4_15
         assign GauFilter_Equal_2Ux1U_1U_4_15_out1 = GauFilter_Equal_2Ux1U_1U_4_15_in2 == 2'd1;

         // resource: GauFilter_OrReduction_2U_1U_4  instance: GauFilter_OrReduction_2U_1U_4_16
         assign GauFilter_OrReduction_2U_1U_4_16_out1 = (|GauFilter_Equal_2Ux1U_1U_4_15_in2);

         // resource: GauFilter_N_Mux_8_2_0_4
         always @(s_reg_26 or GauFilter_Equal_2Ux2U_1U_4_14_out1)
          begin :GauFilter_N_Mux_8_2_0_4_17
            if (GauFilter_Equal_2Ux2U_1U_4_14_out1) begin
               GauFilter_N_Mux_8_2_0_4_17_out1 = 8'd000;
            end
            else begin
               GauFilter_N_Mux_8_2_0_4_17_out1 = s_reg_26;
            end
         end

         // resource: GauFilter_N_Mux_8_2_0_4
         always @(s_reg_27 or GauFilter_Equal_2Ux1U_1U_4_15_out1)
          begin :GauFilter_N_Mux_8_2_0_4_18
            if (GauFilter_Equal_2Ux1U_1U_4_15_out1) begin
               GauFilter_N_Mux_8_2_0_4_18_out1 = 8'd000;
            end
            else begin
               GauFilter_N_Mux_8_2_0_4_18_out1 = s_reg_27;
            end
         end

         // resource: GauFilter_N_Mux_8_2_1_4
         always @(s_reg_28 or GauFilter_OrReduction_2U_1U_4_16_out1)
          begin :GauFilter_N_Mux_8_2_1_4_19
            if (GauFilter_OrReduction_2U_1U_4_16_out1) begin
               GauFilter_N_Mux_8_2_1_4_19_out1 = s_reg_28;
            end
            else begin
               GauFilter_N_Mux_8_2_1_4_19_out1 = 8'd000;
            end
         end

         // resource: GauFilter_Add_2Ux1U_2U_4  instance: GauFilter_Add_2Ux1U_2U_4_20
         assign GauFilter_Add_2Ux1U_2U_4_20_out1 = s_reg_29 + 2'd1;

         // resource: GauFilter_Add_2Ux1U_2U_4  instance: GauFilter_Add_2Ux1U_2U_4_21
         assign GauFilter_Add_2Ux1U_2U_4_21_out1 = s_reg_30 + 2'd1;

         // resource: GauFilter_Mul_2Ux2U_4U_4  instance: GauFilter_Mul_2Ux2U_4U_4_22
         assign GauFilter_Mul_2Ux2U_4U_4_22_out1 = {2'b00, s_reg_30}*4'd03;

         // resource: GauFilter_Add_4Ux2U_4U_4  instance: GauFilter_Add_4Ux2U_4U_4_23
         assign GauFilter_Add_4Ux2U_4U_4_23_out1 = s_reg_34 + {2'b00, s_reg_29};

         // resource: GauFilter_Equal_2Ux1U_1U_4  instance: GauFilter_Equal_2Ux1U_1U_4_25
         assign GauFilter_Equal_2Ux1U_1U_4_25_out1 = s_reg_36 == 2'd1;

         // resource: GauFilter_OrReduction_2U_1U_4  instance: GauFilter_OrReduction_2U_1U_4_26
         assign GauFilter_OrReduction_2U_1U_4_26_out1 = (|s_reg_36);

         // resource: GauFilter_Add_2Ux1U_2U_4  instance: GauFilter_Add_2Ux1U_2U_4_27
         assign GauFilter_Add_2Ux1U_2U_4_27_out1 = s_reg_36 + 2'd1;

         // resource: GauFilter_N_Mux_8_3_2_4
         always @(s_reg_32 or s_reg_33 or s_reg_35 or s_reg_36)
          begin :GauFilter_N_Mux_8_3_2_4_28
            case (s_reg_36) 

               2'd0:                begin
                  GauFilter_N_Mux_8_3_2_4_28_out1 = s_reg_32;
               end
               
               2'd1:                begin
                  GauFilter_N_Mux_8_3_2_4_28_out1 = s_reg_33;
               end
               
               default:                begin
                  GauFilter_N_Mux_8_3_2_4_28_out1 = s_reg_35;
               end
               
            endcase

         end

         // resource: GauFilter_N_Mux_8_3_2_4
         always @(s_reg_26 or s_reg_27 or s_reg_28 or s_reg_36)
          begin :GauFilter_N_Mux_8_3_2_4_29
            case (s_reg_36) 

               2'd0:                begin
                  GauFilter_N_Mux_8_3_2_4_29_out1 = s_reg_28;
               end
               
               2'd1:                begin
                  GauFilter_N_Mux_8_3_2_4_29_out1 = s_reg_27;
               end
               
               default:                begin
                  GauFilter_N_Mux_8_3_2_4_29_out1 = s_reg_26;
               end
               
            endcase

         end

         // resource: mux_4bx2i0c
         always @(s_reg_34 or GauFilter_Add_4Ux2U_4U_4_23_out1 or gs_ctrl4)
          begin :drive_mask_in1
            if (gs_ctrl4) begin
               mask_in1 = s_reg_34;
            end
            else begin
               mask_in1 = GauFilter_Add_4Ux2U_4U_4_23_out1;
            end
         end

         // resource: GauFilter_Mul_8Ux8U_12U_4  instance: GauFilter_Mul_8Ux8U_12U_4_30
         assign GauFilter_Mul_8Ux8U_12U_4_30_out1 = {4'b0000, GauFilter_N_Mux_8_3_2_4_28_out1}*{4'b0000, mask_out1};

         // instance: drive_GauFilter_Add_8Ux8U_8U_4_31_in1
         assign GauFilter_Add_8Ux8U_8U_4_31_in1 = GauFilter_Mul_8Ux8U_12U_4_30_out1[11:4];

         // resource: GauFilter_Add_8Ux8U_8U_4  instance: GauFilter_Add_8Ux8U_8U_4_31
         assign GauFilter_Add_8Ux8U_8U_4_31_out1 = GauFilter_N_Mux_8_3_2_4_29_out1 + GauFilter_Add_8Ux8U_8U_4_31_in1;

         // resource: GauFilter_N_Mux_8_2_3_4
         always @(s_reg_26 or GauFilter_Equal_2Ux2U_1U_4_14_out1 or GauFilter_Add_8Ux8U_8U_4_31_out1)
          begin :GauFilter_N_Mux_8_2_3_4_32
            if (GauFilter_Equal_2Ux2U_1U_4_14_out1) begin
               GauFilter_N_Mux_8_2_3_4_32_out1 = GauFilter_Add_8Ux8U_8U_4_31_out1;
            end
            else begin
               GauFilter_N_Mux_8_2_3_4_32_out1 = s_reg_26;
            end
         end

         // resource: GauFilter_N_Mux_8_2_3_4
         always @(s_reg_27 or GauFilter_Equal_2Ux1U_1U_4_25_out1 or GauFilter_Add_8Ux8U_8U_4_31_out1)
          begin :GauFilter_N_Mux_8_2_3_4_33
            if (GauFilter_Equal_2Ux1U_1U_4_25_out1) begin
               GauFilter_N_Mux_8_2_3_4_33_out1 = GauFilter_Add_8Ux8U_8U_4_31_out1;
            end
            else begin
               GauFilter_N_Mux_8_2_3_4_33_out1 = s_reg_27;
            end
         end

         // resource: GauFilter_N_Mux_8_2_3_4
         always @(s_reg_28 or GauFilter_OrReduction_2U_1U_4_26_out1 or GauFilter_Add_8Ux8U_8U_4_31_out1)
          begin :GauFilter_N_Mux_8_2_3_4_34
            if (GauFilter_OrReduction_2U_1U_4_26_out1) begin
               GauFilter_N_Mux_8_2_3_4_34_out1 = s_reg_28;
            end
            else begin
               GauFilter_N_Mux_8_2_3_4_34_out1 = GauFilter_Add_8Ux8U_8U_4_31_out1;
            end
         end

         // resource: GauFilter_LessThan_2Ux2U_1U_4  instance: GauFilter_LessThan_2Ux2U_1U_4_35
         assign GauFilter_LessThan_2Ux2U_1U_4_35_out1 = s_reg_31 < 2'd3;

         // resource: GauFilter_LessThan_2Ux2U_1U_4  instance: GauFilter_LessThan_2Ux2U_1U_4_36
         assign GauFilter_LessThan_2Ux2U_1U_4_36_out1 = s_reg_30 < 2'd3;

         // resource: regr_en_sc_4
         always @(posedge i_clk)
          begin :drive_global_state
            if (i_rst == 1'b0) begin
               global_state <= 4'd00;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     global_state <= global_state_next;
                  end
                  
               endcase

            end
         end

         // resource: mux_4bx4i3c
         always @(GauFilter_LessThan_2Ux2U_1U_4_13_out1 or GauFilter_Add_2Ux1U_2U_4_27_out1 or GauFilter_LessThan_2Ux2U_1U_4_35_out1 or GauFilter_LessThan_2Ux2U_1U_4_36_out1 or global_state)
          begin :drive_global_state_next
            case (global_state) 

               4'd00, 4'd01, 4'd08:                begin
                  if (GauFilter_LessThan_2Ux2U_1U_4_13_out1) begin
                     global_state_next = 4'd01;
                  end
                  else begin
                     global_state_next = 4'd02;
                  end
               end
               
               4'd06:                begin
                  case (GauFilter_Add_2Ux1U_2U_4_27_out1) 

                     2'd3:                      begin
                        if (GauFilter_LessThan_2Ux2U_1U_4_36_out1) begin
                           global_state_next = 4'd02;
                        end
                        else begin
                           if (GauFilter_LessThan_2Ux2U_1U_4_35_out1) begin
                              global_state_next = 4'd02;
                           end
                           else begin
                              global_state_next = global_state + 4'd01;
                           end
                        end
                     end
                     
                     default:                      begin
                        global_state_next = 4'd06;
                     end
                     
                  endcase

               end
               
               default:                begin
                  global_state_next = global_state + 4'd01;
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl0
            if (i_rst == 1'b0) begin
               gs_ctrl0 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        4'd01:                         begin
                           gs_ctrl0 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl0 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl1
            if (i_rst == 1'b0) begin
               gs_ctrl1 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        4'd01, 4'd06:                         begin
                           gs_ctrl1 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl1 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl4
            if (i_rst == 1'b0) begin
               gs_ctrl4 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        4'd06:                         begin
                           gs_ctrl4 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl4 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // instance: drive_i_r_busy
         assign i_r_busy = GauFilter_gen_busy_r_4_39_out1[2];

         // resource: GauFilter_gen_busy_r_4  instance: GauFilter_gen_busy_r_4_39
         assign GauFilter_gen_busy_r_4_39_out1 = {GauFilter_gen_busy_r_4_39_gnew_req_i1, {GauFilter_gen_busy_r_4_39_gdiv_i3, GauFilter_gen_busy_r_4_39_gen_busy_0_i_r_m_data_is_invalid_next}};

         // resource: GauFilter_gen_busy_r_4  instance: GauFilter_gen_busy_r_4_39
         assign GauFilter_gen_busy_r_4_39_gen_busy_0_i_r_m_data_is_invalid_next = ~GauFilter_gen_busy_r_4_39_gdiv_i3;

         // resource: GauFilter_gen_busy_r_4  instance: GauFilter_gen_busy_r_4_39
         assign GauFilter_gen_busy_r_4_39_gdiv_i3 = i_r_vld & !GauFilter_gen_busy_r_4_39_gnew_req_i1;

         // resource: GauFilter_gen_busy_r_4  instance: GauFilter_gen_busy_r_4_39
         assign GauFilter_gen_busy_r_4_39_gnew_req_i1 = i_r_m_busy_req_0 & (i_r_m_unvalidated_req | i_r_vld);

         // resource: regr_ss_1
         always @(posedge i_clk)
          begin :drive_i_r_m_unvalidated_req
            if (i_rst == 1'b0) begin
               i_r_m_unvalidated_req <= 1'd1;
            end
            else begin
               i_r_m_unvalidated_req <= GauFilter_N_Muxb_1_2_4_4_4_out1;
            end
         end

         // resource: GauFilter_N_Muxb_1_2_4_4
         always @(i_r_vld or i_r_m_busy_req_0 or i_r_m_unvalidated_req)
          begin :GauFilter_N_Muxb_1_2_4_4_4
            if (i_r_m_busy_req_0) begin
               GauFilter_N_Muxb_1_2_4_4_4_out1 = i_r_m_unvalidated_req;
            end
            else begin
               GauFilter_N_Muxb_1_2_4_4_4_out1 = i_r_vld;
            end
         end

         // instance: drive_i_g_busy
         assign i_g_busy = GauFilter_gen_busy_r_4_40_out1[2];

         // resource: GauFilter_gen_busy_r_4  instance: GauFilter_gen_busy_r_4_40
         assign GauFilter_gen_busy_r_4_40_out1 = {GauFilter_gen_busy_r_4_40_gnew_req_i1, {GauFilter_gen_busy_r_4_40_gdiv_i3, GauFilter_gen_busy_r_4_40_gen_busy_0_i_r_m_data_is_invalid_next}};

         // resource: GauFilter_gen_busy_r_4  instance: GauFilter_gen_busy_r_4_40
         assign GauFilter_gen_busy_r_4_40_gen_busy_0_i_r_m_data_is_invalid_next = ~GauFilter_gen_busy_r_4_40_gdiv_i3;

         // resource: GauFilter_gen_busy_r_4  instance: GauFilter_gen_busy_r_4_40
         assign GauFilter_gen_busy_r_4_40_gdiv_i3 = i_g_vld & !GauFilter_gen_busy_r_4_40_gnew_req_i1;

         // resource: GauFilter_gen_busy_r_4  instance: GauFilter_gen_busy_r_4_40
         assign GauFilter_gen_busy_r_4_40_gnew_req_i1 = i_g_m_busy_req_0 & (i_g_m_unvalidated_req | i_g_vld);

         // resource: regr_ss_1
         always @(posedge i_clk)
          begin :drive_i_g_m_unvalidated_req
            if (i_rst == 1'b0) begin
               i_g_m_unvalidated_req <= 1'd1;
            end
            else begin
               i_g_m_unvalidated_req <= GauFilter_N_Muxb_1_2_4_4_7_out1;
            end
         end

         // resource: GauFilter_N_Muxb_1_2_4_4
         always @(i_g_vld or i_g_m_busy_req_0 or i_g_m_unvalidated_req)
          begin :GauFilter_N_Muxb_1_2_4_4_7
            if (i_g_m_busy_req_0) begin
               GauFilter_N_Muxb_1_2_4_4_7_out1 = i_g_m_unvalidated_req;
            end
            else begin
               GauFilter_N_Muxb_1_2_4_4_7_out1 = i_g_vld;
            end
         end

         // instance: drive_i_b_busy
         assign i_b_busy = GauFilter_gen_busy_r_4_41_out1[2];

         // resource: GauFilter_gen_busy_r_4  instance: GauFilter_gen_busy_r_4_41
         assign GauFilter_gen_busy_r_4_41_out1 = {GauFilter_gen_busy_r_4_41_gnew_req_i1, {GauFilter_gen_busy_r_4_41_gdiv_i3, GauFilter_gen_busy_r_4_41_gen_busy_0_i_r_m_data_is_invalid_next}};

         // resource: GauFilter_gen_busy_r_4  instance: GauFilter_gen_busy_r_4_41
         assign GauFilter_gen_busy_r_4_41_gen_busy_0_i_r_m_data_is_invalid_next = ~GauFilter_gen_busy_r_4_41_gdiv_i3;

         // resource: GauFilter_gen_busy_r_4  instance: GauFilter_gen_busy_r_4_41
         assign GauFilter_gen_busy_r_4_41_gdiv_i3 = i_b_vld & !GauFilter_gen_busy_r_4_41_gnew_req_i1;

         // resource: GauFilter_gen_busy_r_4  instance: GauFilter_gen_busy_r_4_41
         assign GauFilter_gen_busy_r_4_41_gnew_req_i1 = i_b_m_busy_req_0 & (i_b_m_unvalidated_req | i_b_vld);

         // resource: regr_ss_1
         always @(posedge i_clk)
          begin :drive_i_b_m_unvalidated_req
            if (i_rst == 1'b0) begin
               i_b_m_unvalidated_req <= 1'd1;
            end
            else begin
               i_b_m_unvalidated_req <= GauFilter_N_Muxb_1_2_4_4_10_out1;
            end
         end

         // resource: GauFilter_N_Muxb_1_2_4_4
         always @(i_b_vld or i_b_m_busy_req_0 or i_b_m_unvalidated_req)
          begin :GauFilter_N_Muxb_1_2_4_4_10
            if (i_b_m_busy_req_0) begin
               GauFilter_N_Muxb_1_2_4_4_10_out1 = i_b_m_unvalidated_req;
            end
            else begin
               GauFilter_N_Muxb_1_2_4_4_10_out1 = i_b_vld;
            end
         end

         // instance: drive_o_result_vld
         assign o_result_vld = GauFilter_Or_1Ux1U_1U_4_2_out1;

         // resource: GauFilter_Or_1Ux1U_1U_4  instance: GauFilter_Or_1Ux1U_1U_4_2
         assign GauFilter_Or_1Ux1U_1U_4_2_out1 = o_result_m_unacked_req | GauFilter_Xor_1Ux1U_1U_1_1_out1;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_m_unacked_req
            if (i_rst == 1'b0) begin
               o_result_m_unacked_req <= 1'd0;
            end
            else begin
               o_result_m_unacked_req <= GauFilter_And_1Ux1U_1U_4_37_out1;
            end
         end

         // resource: GauFilter_And_1Ux1U_1U_4  instance: GauFilter_And_1Ux1U_1U_4_37
         assign GauFilter_And_1Ux1U_1U_4_37_out1 = o_result_busy & o_result_vld;

         // resource: GauFilter_Xor_1Ux1U_1U_1  instance: GauFilter_Xor_1Ux1U_1U_1_1
         assign GauFilter_Xor_1Ux1U_1U_1_1_out1 = o_result_m_req_m_trig_req ^ o_result_m_req_m_prev_trig_req;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_m_req_m_prev_trig_req
            if (i_rst == 1'b0) begin
               o_result_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               o_result_m_req_m_prev_trig_req <= o_result_m_req_m_trig_req;
            end
         end

         // resource: GauFilter_Not_1U_1U_1  instance: GauFilter_Not_1U_1U_1_3
         assign GauFilter_Not_1U_1U_1_3_out1 = !o_result_m_req_m_trig_req;


endmodule

